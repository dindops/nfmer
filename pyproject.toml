[tool.poetry]
name = "nfmer"
version = "0.1.0"
description = ""
authors = ["Piotr Dindorf <piotr.dindorf@mailo.com>"]
readme = "README.md"
packages = [
    { include = "nfmer" },
    { include = "nfmer/scraper" },
    { include = "nfmer/db_handler" }
]

[tool.poetry.dependencies]
python = "^3.11"
tenacity = "^9.0.0"
sqlalchemy = "^2.0.37"
fastapi = {extras = ["standard"], version = "^0.115.8"}
sqlmodel = "^0.0.22"

[tool.poetry.group.scraper.dependencies]
bs4 = "^0.0.1"
httpx = "^0.28.1"

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-mock = "3.14.0"
coverage = "^7.6.10"
pytest-httpx = "^0.35.0"
pytest-asyncio = "^0.25.3"
pytest-aiohttp = "^1.1.0"

[tool.poetry.group.fmt.dependencies]
mypy = "^1.15.0"
black = "^25.1.0"
flake8 = "^7.1.2"
isort = "^6.0.0"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
log_cli = true
log_cli_level = "INFO"

[tool.coverage.run]
disable_warnings = ["no-data-collected"]

[tool.coverage.report]
exclude_lines = [
  # Re-enable the standard pragma
  "pragma: no cover",
  # Skip any pass lines such as may be used for @abstractmethod
  "pass",
  # Skip abstract methods directly
  "@abstractmethod",
  "@abc.abstractmethod",
  # Skip defensive assertion code
  "raise AssertionError",
  "raise NotImplementedError",
  # Skip the 'main' module entry
  "if __name__ == .__main__.:",
]
fail_under = 85
skip_covered = true

[tool.isort]
profile = "black"
src_paths = ["nfmer", "tests"]

[tool.black]
line-length = 120

[tool.flake8]
max-line-length = 120

[tool.mypy]
strict = true
show_error_codes = true
plugins = "pydantic.mypy"

[tool.poetry.scripts]
scraper = "nfmer.scraper:main"
generate_schema = "utils.schema_generator:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
